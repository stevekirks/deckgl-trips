{"version":3,"sources":["deckgl-overlay.tsx","info-box.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","report-web-vitals.ts","index.tsx"],"names":["DeckGLOverlay","props","useState","currentTime","setCurrentTime","id","animation","useEffect","window","requestAnimationFrame","animate","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMinutes","cancelAnimationFrame","getColor","useCallback","d","color","tagColor","nodes","highlightedNodes","length","forEach","n","find","hn","toLowerCase","highlightColor","layers","trips","push","TripsLayer","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","trailLength","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","handleOnHover","onClick","info","console","log","object","properties","name","initialViewState","viewState","viewport","InfoBox","handleLoopTimeMinutes","handleTimestampOffset","handleTrailLength","handleDataChange","handleHighlightedNodes","reloadTrips","friendlyTime","setFriendlyTime","hideInfoBox","setHideInfoBox","percentThroughLoop","setPercentThroughLoop","updateBoxInfoLoopToggle","setUpdateBoxInfoLoopToggle","intervalId","setInterval","clearInterval","startDate","pTimestamp","pLoopTime","timeThroughLoop","pPercentThroughLoop","Math","floor","calculatedFriendlyTime","timeSinceStart","realTimeSinceStart","timeMultiplier","currentDate","getTime","minutes","String","getMinutes","getDate","getMonth","getFullYear","getHours","toFriendlyTime","getLoopTime","handleTimeChange","event","newTimeThroughLoop","target","value","newTimestampOffset","handleTrailLengthChange","trailLengthStr","pTrailLength","parseFloat","appConfig","initialTrailLength","handleLoopTimeMinutesChange","loopTimeMinutesStr","pLoopTimeMinutes","newLoopTime","initialLoopTimeMinutes","handleHighlightNodeChange","highlightedNodesCommaSep","pHighlightedNodes","highlightedNodesRemoved","handleDataSelectChange","dataSampleOption","handleInfoBoxVisibility","pHideInfoBox","dataSampleOptions","dataSamples","idx","title","nodeListOptions","nodeList","highlightedNodesVl","selectDataEle","options","onChange","dataSampleIdx","friendlyName","className","type","min","max","onInput","nodeLabelPlural","closeMenuOnSelect","isMulti","onMenuClose","placeholder","Loader","React","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","PARAM_DATA_IDX","PARAM_LOOPTIME","PARAM_TRAILLENGTH","PARAM_HIGHLIGHTNODES","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","DEFAULT_APP_SETTINGS","colors","initialViewport","latitude","longitude","zoom","maxZoom","pitch","bearing","width","height","mapboxStyle","nodeLabel","getWindowSize","innerWidth","innerHeight","App","result","dataIdx","highlightNodes","Utils","knownUrlParams","setKnownUrlParams","appSettings","setAppSettings","setDataSampleIdx","setFriendlyName","setHighlightedNodes","setLoopLength","setLoopTimeMinutes","setNodeList","setNodes","popupInfo","setPopupInfo","setStartDate","setTimestampOffset","setTimeMultiplier","setTrailLength","setTrips","setViewport","handleWindowResize","prevViewport","addEventListener","fetch","method","headers","then","fetchResponse","status","json","pAppSettings","prevAppSettings","catch","error","removeEventListener","dataUrlIdx","prevKnownUrlParams","url","tripsUrl","response","pFriendlyName","pStartDate","startTimestamp","parse","pTimeMultiplier","pTrips","pLoopLength","loadTrips","nodeListUrl","sort","geoJsonUrl","loadGeoJsonNodes","initialPartialViewport","history","pushState","params","newStateStr","decodeURIComponent","search","substring","queryFilters","loader","popupEle","geometry","closeButton","closeOnClick","anchor","mapStyle","dragRotate","onViewportChange","pViewport","mapboxApiAccessToken","process","pDataSampleIdx","pTimestampOffset","prevTrips","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mapboxgl","workerClass","require","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ca7168c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, Waypoint} from './data-interfaces';\nimport { RGBAColor, Position } from '@deck.gl/core';\nimport { useCallback } from 'react';\n\nconst DeckGLOverlay = (props: DeckglOverlayProps) => {\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [animation] = useState({id:0});\n\n  useEffect(() => {\n    const animate = () => {\n      if (props.loopLength != null) {\n        const timestamp = Date.now() - props.timestampOffset;\n        const loopTime = props.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n        setCurrentTime((timestamp % loopTime) * (props.loopLength / loopTime));\n      }\n      animation.id = window.requestAnimationFrame(animate);\n    }\n\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n  }, [animation, props.loopLength, props.timestampOffset, props.loopTimeMinutes]);\n\n  const getColor = useCallback((d: Trip) => {\n    let color = props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (props.highlightedNodes.length > 0) {\n        d.nodes.forEach((n: string) => {\n          if (props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = props.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color as RGBAColor;\n  }, [props.color, props.highlightColor, props.highlightedNodes]);\n\n  let layers = [];\n  \n  if (props.trips != null) {\n    layers.push(new TripsLayer({\n      id: 'trips',\n      data: props.trips,\n      getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates as Position),\n      getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n      getColor: getColor,\n      opacity: 0.3,\n      widthMinPixels: 2,\n      trailLength: props.trailLength,\n      currentTime\n    }));\n  }\n\n  if (props.nodes != null) {\n    layers.push(new GeoJsonLayer({\n      id: 'geojson-layer',\n      data: props.nodes,\n      filled: true,\n      getFillColor: () => [0, 255, 178, 150],\n      stroked: true,\n      extruded: false,\n      pointRadiusScale: 100,\n      getRadius: () => 0.4,\n      pickable: true,\n      autoHighlight: true,\n      highlightColor: [0, 255, 178, 250],\n      onHover: props.handleOnHover,\n      onClick: (info: any) => console.log(info.object.properties.name)\n    }));\n  }\n\n  if (layers.length === 0) {\n    return null;\n  }\n\n  return (\n    <DeckGL\n      initialViewState={props.initialViewState}\n      viewState={props.viewport}\n      layers={layers}\n    />\n  );\n}\n\nexport default DeckGLOverlay;","import { useState, useEffect } from 'react';\nimport { DataSampleUrls, InfoBoxProps} from './data-interfaces';\nimport Select from 'react-select';\nimport './info-box.css';\nimport './select.css';\nimport { ValueType } from 'react-select/src/types';\nimport { useCallback } from 'react';\n\nconst InfoBox = (props: InfoBoxProps) => {\n\n  const {handleLoopTimeMinutes, handleTimestampOffset, handleTrailLength, handleDataChange, handleHighlightedNodes, reloadTrips} = props;\n\n  const [friendlyTime, setFriendlyTime] = useState('');\n  const [hideInfoBox, setHideInfoBox] = useState(false);\n  const [percentThroughLoop, setPercentThroughLoop] = useState(0);\n  const [updateBoxInfoLoopToggle, setUpdateBoxInfoLoopToggle] = useState(false);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => setUpdateBoxInfoLoopToggle(updateBoxInfoLoopToggle => !updateBoxInfoLoopToggle), 1000000);\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Update Box Info\n\n    const toFriendlyTime = (timeSinceStart: number) => {\n      let realTimeSinceStart = timeSinceStart / props.timeMultiplier;\n      let currentDate = new Date(props.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n    }\n\n    if (props.startDate != null) {\n      const pTimestamp = Date.now() - props.timestampOffset;\n      const pLoopTime = props.loopTimeMinutes * 60 * 1000; // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (pTimestamp % pLoopTime);\n      let pPercentThroughLoop = Math.floor((timeThroughLoop / pLoopTime) * 100);\n\n      // show time\n      let timeSinceStart = Math.floor(timeThroughLoop * (props.loopLength / pLoopTime));\n      let calculatedFriendlyTime = toFriendlyTime(timeSinceStart);\n\n      setFriendlyTime(calculatedFriendlyTime);\n      setPercentThroughLoop(pPercentThroughLoop);\n    }\n  }, [updateBoxInfoLoopToggle, props.timestampOffset, props.loopLength, props.loopTimeMinutes, props.startDate, props.timeMultiplier]);\n\n  // the loop time in milliseconds that deck gl displays\n  const getLoopTime = useCallback(() => {\n    return props.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }, [props.loopTimeMinutes]);\n\n  const handleTimeChange = useCallback((event: any) => {\n    const timestamp = Date.now() - props.timestampOffset;\n    const loopTime = getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = props.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    handleTimestampOffset(newTimestampOffset);\n  }, [getLoopTime, props.timestampOffset, handleTimestampOffset]);\n\n  const handleTrailLengthChange = useCallback((event: any) => {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let pTrailLength = parseFloat(trailLengthStr);\n      if (pTrailLength <= 0) {\n        pTrailLength = 0.0001;\n      } else if (pTrailLength > 9999999) {\n        pTrailLength = 9999999;\n      }\n      handleTrailLength(pTrailLength);\n    } else {\n      handleTrailLength(props.appConfig.initialTrailLength);\n    }\n  }, [handleTrailLength, props.appConfig.initialTrailLength]);\n\n  const handleLoopTimeMinutesChange = useCallback((event: any) => {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let pLoopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (pLoopTimeMinutes <= 0) {\n        pLoopTimeMinutes = 0.0001;\n      } else if (pLoopTimeMinutes > 9999999) {\n        pLoopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - props.timestampOffset;\n      const loopTime = getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = pLoopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = props.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      handleTimestampOffset(newTimestampOffset);\n  \n      handleLoopTimeMinutes(pLoopTimeMinutes);\n    } else {\n      handleLoopTimeMinutes(props.appConfig.initialLoopTimeMinutes);\n    }\n  }, [getLoopTime, handleTimestampOffset, handleLoopTimeMinutes, props.timestampOffset, props.appConfig.initialLoopTimeMinutes]);\n\n  const handleHighlightNodeChange = useCallback((highlightedNodesCommaSep: ValueType<any, any>) => {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let pHighlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = props.highlightedNodes.length > pHighlightedNodes.length;\n    handleHighlightedNodes(pHighlightedNodes);\n    if (highlightedNodesRemoved) {\n      reloadTrips();\n    }\n  }, [handleHighlightedNodes, reloadTrips, props.highlightedNodes]);\n\n  const handleDataSelectChange = useCallback((dataSampleOption: ValueType<any, any>) => {    \n    if (dataSampleOption != null) {\n      handleHighlightNodeChange([]);\n      handleDataChange(dataSampleOption.value as number);\n    }\n  }, [handleHighlightNodeChange, handleDataChange]);\n\n  const handleInfoBoxVisibility = (pHideInfoBox: boolean) => {\n    setHideInfoBox(pHideInfoBox);\n  }\n\n  const dataSampleOptions: any[] = props.appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n  const nodeListOptions: any[] = props.nodeList.map(n => { return { \"value\": n, \"label\": n} });\n  const highlightedNodesVl: any[] = props.highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n  let selectDataEle = null;\n  if (props.appConfig.dataSamples.length > 1) {\n    selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={handleDataSelectChange} value={dataSampleOptions[props.dataSampleIdx]} /></div></div>;\n  }\n\n  return (\n    <div id=\"top-left-container\">\n      <div id=\"title-box\"><h1>{props.friendlyName}</h1></div>\n      <div id=\"divinfo\" className={hideInfoBox ? \"hide\" : \"\"}>\n        <button id=\"btnHideInfoBox\" className=\"btn-transparent right-align\" onClick={() => handleInfoBoxVisibility(true)}>X</button>\n        {selectDataEle}\n        <h3>{friendlyTime}</h3>\n        <div>\n          <h6>Adjust point in time</h6>\n          <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={handleTimeChange} />\n        </div>\n        <div>\n          <h6>Adjust loop time</h6>\n          <div className=\"block\">\n            <input className=\"\" type=\"number\" value={String(props.loopTimeMinutes)} onInput={handleLoopTimeMinutesChange} /><label>mins</label>\n          </div>\n        </div>\n        <div>\n          <h6>Adjust trail length</h6>\n          <div className=\"block\">\n            <input type=\"number\" value={String(props.trailLength)} onInput={handleTrailLengthChange} /><label>x</label>\n          </div>\n        </div>\n        <div>\n          <h6>Highlight {props.appConfig.nodeLabelPlural}</h6>\n          <div>\n            <Select\n              closeMenuOnSelect={false}\n              isMulti\n              options={nodeListOptions}\n              onChange={handleHighlightNodeChange}\n              onMenuClose={props.reloadTrips}\n              placeholder={\"Highlight \" + props.appConfig.nodeLabelPlural}\n              value={highlightedNodesVl}\n            />\n          </div>\n        </div>\n      </div>\n      <button id=\"btnShowInfoBox\" className={\"btn-transparent \" + (hideInfoBox ? \"\" : \"hide\")} onClick={() => handleInfoBoxVisibility(false)}>SHOW INFO BOX</button>\n    </div>\n  );\n}\n\nexport default InfoBox;","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport function getKnownUrlParameters(): KnownUrlParameters {\n  let result: KnownUrlParameters = {\n    dataSampleIdx: null,\n    loopTime: null,\n    trailLength: null,\n    highlightedNodes: null\n  };\n\n  // Convert day to dataUrlIdx\n  let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n  if (dataIdx != null && dataIdx >= 0) {\n    result.dataSampleIdx = dataIdx;\n  }\n\n  // Validate loopTime\n  let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n  if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n    result.loopTime = loopTime;\n  }\n\n  // Validate trailLength\n  let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n  if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n    result.trailLength = trailLength;\n  }\n\n  // Validate highlightNode\n  let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n  if (highlightNodes != null && highlightNodes.length > 0) {\n    result.highlightedNodes = highlightNodes.split(',');\n  }\n\n  return result;\n}\n\nexport function updateUrlParameters(params: KnownUrlParameters) {\n  let newStateStr = decodeURIComponent(window.location.search.substring(1));\n  if (params.dataSampleIdx != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n  }\n  if (params.loopTime != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n  }\n  if (params.trailLength != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n  }\n  if (params.highlightedNodes != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n  }\n  \n  let queryFilters = \"?\" + newStateStr;\n  window.history.pushState({}, \"\", queryFilters);\n}","import { AppSettings } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_SETTINGS: AppSettings = {\n    color: [255, 235, 86], // yellow\n    colors: [\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    dataSamples: [],\n    highlightColor: [255, 109, 245], // pink\n    initialLoopTimeMinutes: 1,\n    initialTrailLength: 100,\n    initialViewport: {\n        latitude: 19.045632,\n        longitude: 68.538902,\n        zoom: 3,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    },\n    mapboxStyle: \"mapbox://styles/mapbox/dark-v10\",\n    nodeLabel: \"Node\",\n    nodeLabelPlural: 'Nodes',\n    title: \"Trips\"\n};","import { useState, useEffect } from 'react';\nimport ReactMapGL, { Popup } from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay';\nimport InfoBox from './info-box';\nimport Loader from './loader';\nimport { AppSettings, KnownUrlParameters, Trip, TripContainer } from './data-interfaces';\nimport * as Utils from './utils';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { DEFAULT_APP_SETTINGS } from './default-app-config';\n\nconst getWindowSize = () => {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nconst App = () => {\n\n  const [knownUrlParams, setKnownUrlParams] = useState<KnownUrlParameters>(Utils.getKnownUrlParameters());\n  const [appSettings, setAppSettings] = useState<AppSettings>(DEFAULT_APP_SETTINGS);\n  const [dataSampleIdx, setDataSampleIdx] = useState(knownUrlParams.dataSampleIdx || -1);\n  const [friendlyName, setFriendlyName] = useState('');\n  const [highlightedNodes, setHighlightedNodes] = useState(knownUrlParams.highlightedNodes != null ? knownUrlParams.highlightedNodes : []);\n  const [loopLength, setLoopLength] = useState(1000);\n  const [loopTimeMinutes, setLoopTimeMinutes] = useState(knownUrlParams.loopTime || DEFAULT_APP_SETTINGS.initialLoopTimeMinutes);\n  const [nodeList, setNodeList] = useState<string[]>([]);\n  const [nodes, setNodes] = useState<geojson.FeatureCollection<geojson.Point> | null>(null);\n  const [popupInfo, setPopupInfo] = useState<any>(null);\n  const [startDate, setStartDate] = useState<Date>(new Date(2000, 1, 1, 0, 0, 0));\n  const [timestampOffset, setTimestampOffset] = useState<number>(Date.now());\n  const [timeMultiplier, setTimeMultiplier] = useState(1);\n  const [trailLength, setTrailLength] = useState(knownUrlParams.trailLength || DEFAULT_APP_SETTINGS.initialTrailLength);\n  const [trips, setTrips] = useState<Trip[] | null>(null);\n  const [viewport, setViewport] = useState({ ...DEFAULT_APP_SETTINGS.initialViewport });\n\n  const reloadTrips = () => {\n    // create a new array for trips so the colours are updated\n    setTrips((prevTrips) => { return prevTrips ? [...prevTrips] : null; });\n  }\n\n  const handleHighlightedNodes = (pHighlightedNodes: string[]) => {\n    setHighlightedNodes(pHighlightedNodes);\n    setKnownUrlParams((prevKnownUrlParams) => { return { ...prevKnownUrlParams, highlightedNodes: pHighlightedNodes }; });\n  }\n\n  const handleLoopTimeMinutes = (pLoopTimeMinutes: number) => {\n    setLoopTimeMinutes(pLoopTimeMinutes);\n    setKnownUrlParams((prevKnownUrlParams) => { return { ...prevKnownUrlParams, loopTime: pLoopTimeMinutes }; });\n  }\n\n  const handleOnHoverGeoPoint = (info: any) => {\n    setPopupInfo(info !== null ? info.object : null);\n  }\n\n  const handleTimestampOffset = (pTimestampOffset: number) => { setTimestampOffset(pTimestampOffset); }\n\n  const handleTrailLength = (pTrailLength: number) => {\n    setTrailLength(pTrailLength);\n    setKnownUrlParams((prevKnownUrlParams) => { return { ...prevKnownUrlParams, trailLength: pTrailLength }; });\n  }\n\n  const handleViewportChange = (pViewport: any) => {\n    setViewport((prevViewport) => { return { ...prevViewport, ...pViewport, ...getWindowSize() }; });\n  }\n\n  const handleDataChange = (pDataSampleIdx: number) => {\n    setDataSampleIdx(pDataSampleIdx);\n  }\n\n  useEffect(() => {\n    const loadAppSettings = () => {\n      fetch('app-settings.json', {\n        method: \"GET\",\n        headers: { \"Accept\": \"application/json; charset=utf-8\" }\n      }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((pAppSettings: AppSettings) => {\n            setAppSettings((prevAppSettings) => { return { ...prevAppSettings, ...pAppSettings }; });\n          });\n        } else {\n          console.log('Sorry, could not load config (' + fetchResponse.status + ')');\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    const handleWindowResize = () => setViewport((prevViewport) => { return { ...prevViewport, ...getWindowSize() }; });\n    window.addEventListener('resize', handleWindowResize);\n    //setViewport((prevViewport) => { return { ...prevViewport, ...getWindowSize() }; })\n\n    loadAppSettings();\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLoopTimeMinutes(knownUrlParams.loopTime || appSettings.initialLoopTimeMinutes);\n    setTrailLength(knownUrlParams.trailLength || appSettings.initialTrailLength);\n  }, [knownUrlParams, appSettings]);\n\n  useEffect(() => {\n    const loadTrips = (dataUrlIdx: number) => {\n      let url = appSettings.dataSamples[dataUrlIdx].tripsUrl;\n      fetch(url)\n        .then(function (fetchResponse) {\n          if (fetchResponse.status === 200) {\n            fetchResponse.json().then((response: TripContainer) => {\n              let pFriendlyName = appSettings.title;\n              if (response.friendlyName != null) {\n                pFriendlyName = response.friendlyName;\n              }\n              let pStartDate = Number(response.startTimestamp)\n                ? new Date(response.startTimestamp as number * 1000)\n                : new Date(Date.parse(response.startTimestamp as string));\n              let pTimeMultiplier = response.timeMultiplier;\n              let pTrips = response.trips;\n              let pLoopLength = response.loopLength;\n\n              // allocate colours if there's a small number of trips\n              if (pTrips.length > 0 && pTrips.length <= 10) {\n                for (let i = 0; i < pTrips.length; i++) {\n                  pTrips[i].color = appSettings.colors[i % appSettings.colors.length];\n                }\n              }\n\n              setStartDate(pStartDate);\n              setTimestampOffset(Date.now());\n              setFriendlyName(pFriendlyName);\n              setTrips(pTrips);\n              setLoopLength(pLoopLength);\n              setTimeMultiplier(pTimeMultiplier);\n            });\n          } else {\n            console.log('Something went wrong loading trips (' + fetchResponse.status + ')');\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n    };\n\n    const loadNodeList = (dataUrlIdx: number) => {\n      fetch(appSettings.dataSamples[dataUrlIdx].nodeListUrl)\n        .then(function (fetchResponse) {\n          if (fetchResponse.status === 200) {\n            fetchResponse.json().then((response: string[]) => {\n              response.sort();\n              setNodeList(response);\n            });\n          } else {\n            console.log('Something went wrong loading node list (' + fetchResponse.status + ')');\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n    };\n\n    const loadGeoJsonNodes = (dataUrlIdx: number) => {\n      fetch(appSettings.dataSamples[dataUrlIdx].geoJsonUrl)\n        .then(function (fetchResponse) {\n          if (fetchResponse.status === 200) {\n            fetchResponse.json().then((response: geojson.FeatureCollection<geojson.Point>) => {\n              setNodes(response);\n            });\n          } else {\n            console.log('Something went wrong loading GeoJSON nodes (' + fetchResponse.status + ')');\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n    };\n\n    if (appSettings.dataSamples.length > 0) {\n      if (dataSampleIdx <= -1) {\n        setDataSampleIdx(0);\n      } else {\n        setKnownUrlParams((prevKnownUrlParams) => { return { ...prevKnownUrlParams, dataSampleIdx: dataSampleIdx }; });\n        setDataSampleIdx(dataSampleIdx);\n        loadTrips(dataSampleIdx);\n        loadNodeList(dataSampleIdx);\n        loadGeoJsonNodes(dataSampleIdx);\n        setViewport((prevViewport) => { return { ...prevViewport, ...appSettings.initialViewport, ...appSettings.dataSamples[dataSampleIdx].initialPartialViewport, ...getWindowSize() }; });\n      }\n    }\n  }, [dataSampleIdx, appSettings]);\n\n  useEffect(() => {\n    window.history.pushState({}, '', '');\n    Utils.updateUrlParameters(knownUrlParams);\n  }, [knownUrlParams]);\n\n  let loader = <span></span>;\n  if (trips == null) {\n    loader = <Loader />;\n  }\n\n  let popupEle = null;\n  if (popupInfo != null) {\n    popupEle =\n      <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n        <div className=\"popup-inner\">{appSettings.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n      </Popup>;\n  }\n\n  return (\n    <div id=\"container\">\n      {loader}\n      <div id=\"divdeckgl\">\n        <ReactMapGL\n          {...viewport}\n          mapStyle={appSettings.mapboxStyle}\n          dragRotate={true}\n          onViewportChange={handleViewportChange}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN!}>\n          <DeckGLOverlay\n            color={appSettings.color}\n            handleOnHover={handleOnHoverGeoPoint}\n            highlightColor={appSettings.highlightColor}\n            highlightedNodes={highlightedNodes}\n            initialViewState={appSettings.initialViewport}\n            loopLength={loopLength}\n            loopTimeMinutes={loopTimeMinutes}\n            nodes={nodes!}\n            timestampOffset={timestampOffset}\n            trips={trips}\n            trailLength={trailLength}\n            viewport={viewport}\n          />\n          {popupEle}\n        </ReactMapGL>\n      </div>\n      <InfoBox\n        appConfig={appSettings}\n        dataSampleIdx={dataSampleIdx}\n        friendlyName={friendlyName}\n        handleDataChange={handleDataChange}\n        highlightedNodes={highlightedNodes}\n        handleHighlightedNodes={handleHighlightedNodes}\n        loopLength={loopLength}\n        loopTimeMinutes={loopTimeMinutes}\n        handleLoopTimeMinutes={handleLoopTimeMinutes}\n        nodeList={nodeList}\n        startDate={startDate}\n        timestampOffset={timestampOffset}\n        handleTimestampOffset={handleTimestampOffset}\n        timeMultiplier={timeMultiplier}\n        trailLength={trailLength}\n        handleTrailLength={handleTrailLength}\n        reloadTrips={reloadTrips}\n      />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './report-web-vitals';\n\n// Workaround: these 4 lines are to fix issue https://github.com/mapbox/mapbox-gl-js/issues/10565\n// Install packages worker-loader & mapbox-gl\nimport mapboxgl from \"mapbox-gl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n(mapboxgl as any).workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}