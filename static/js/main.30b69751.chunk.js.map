{"version":3,"sources":["deckgl-overlay.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["DeckGLOverlay","props","animationFrame","state","currentTime","animate","bind","getColor","this","window","cancelAnimationFrame","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","d","color","tagColor","nodes","highlightedNodes","length","self","forEach","n","find","hn","toLowerCase","highlightColor","handleOnHover","initialViewState","trips","trailLength","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","onClick","info","console","log","object","properties","name","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","result","dataSampleIdx","dataIdx","highlightNodes","params","newStateStr","decodeURIComponent","search","substring","String","queryFilters","history","pushState","DEFAULT_APP_CONFIG","colors","dataSamples","title","tripsUrl","process","geoJsonUrl","nodeListUrl","initialPartialViewport","latitude","longitude","zoom","initialLoopTimeMinutes","initialTrailLength","initialViewport","maxZoom","pitch","bearing","width","height","mapboxStyle","mapboxToken","nodeLabel","nodeLabelPlural","App","intervalId","knownUrlParams","Utils","initialDataSampleIdx","appConfig","friendlyName","friendlyTime","hideInfoBox","loopTimeMinutes","nodeList","percentThroughLoop","popupInfo","startDate","timeMultiplier","Object","assign","handleDataChange","handleHighlightNodeChange","handleHighlightNodeReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadNodeList","loadTrips","updateBoxInfo","addEventListener","resize","loadGeoJsonNodes","setInterval","clearInterval","dataUrlIdx","url","requestJson","error","response","parse","startTimestamp","sort","getLoopTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedNodesCommaSep","highlightedNodesRemoved","dataSampleOption","handleViewportChange","innerWidth","innerHeight","dataSampleOptions","idx","nodeListOptions","highlightedNodesVl","loader","popupEle","geometry","closeButton","closeOnClick","anchor","selectDataEle","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","handleInfoBoxVisibility","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","placeholder","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30b69751.chunk.js","sourcesContent":["import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState, Waypoint} from './data-interfaces';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this.animationFrame = null;\n\n    this.animate = this.animate.bind(this);\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrame != null) {\n      window.cancelAnimationFrame(this.animationFrame);\n    }\n  }\n\n  animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this.animationFrame = window.requestAnimationFrame(this.animate.bind(this));\n  }\n  \n  getColor(d: Trip) {\n    let color = this.props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (this.props.highlightedNodes.length > 0) {\n        let self = this;\n        d.nodes.forEach((n: string) => {\n          if (self.props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = this.props.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color;\n  }\n\n  render() {\n    const {handleOnHover, initialViewState, nodes, trips, trailLength, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates),\n        getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.3,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (nodes != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: nodes,\n        filled: true,\n        getFillColor: () => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 100,\n        getRadius: () => 0.4,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport default {\n  getKnownUrlParameters(): KnownUrlParameters {\n    let result: KnownUrlParameters = {\n      dataSampleIdx: null,\n      loopTime: null,\n      trailLength: null,\n      highlightedNodes: null\n    };\n\n    // Convert day to dataUrlIdx\n    let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n    if (dataIdx != null && dataIdx >= 0) {\n      result.dataSampleIdx = dataIdx;\n    }\n\n    // Validate loopTime\n    let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n    if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n      result.loopTime = loopTime;\n    }\n\n    // Validate trailLength\n    let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n    if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n      result.trailLength = trailLength;\n    }\n\n    // Validate highlightNode\n    let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n    if (highlightNodes != null && highlightNodes.length > 0) {\n      result.highlightedNodes = highlightNodes.split(',');\n    }\n\n    return result;\n  },\n\n  updateUrlParameters(params: KnownUrlParameters) {\n    let newStateStr = decodeURIComponent(window.location.search.substring(1));\n    if (params.dataSampleIdx != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n    }\n    if (params.loopTime != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n    }\n    if (params.trailLength != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n    }\n    if (params.highlightedNodes != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n    }\n    \n    let queryFilters = \"?\" + newStateStr;\n    window.history.pushState({}, \"\", queryFilters);\n  }\n}","import { AppConfig } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_CONFIG: AppConfig = {\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            initialPartialViewport: {\n                latitude: -27.44,\n                longitude: 153.05,\n                zoom: 11\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            initialPartialViewport: {\n                latitude: -26.65,\n                longitude: 153.02,\n                zoom: 10\n            }\n        }\n    ],\n    highlightColor: [253, 128, 93], // orange\n    initialLoopTimeMinutes: 1,\n    initialTrailLength: 100,\n    initialViewport: {\n        latitude: -27.44,\n        longitude: 153.05,\n        zoom: 11,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    },\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    nodeLabel: \"Stop\",\n    nodeLabelPlural: 'Stops',\n    title: \"Trips\"\n};","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport {json as requestJson} from 'd3-request';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType } from 'react-select/src/types';\nimport { DEFAULT_APP_CONFIG } from './default-app-config';\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  intervalId: any;\n  knownUrlParams: KnownUrlParameters;\n  timestampOffset: number;\n\n  constructor(props: any) {\n    super(props);\n\n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      appConfig: DEFAULT_APP_CONFIG,\n      dataSampleIdx: initialDataSampleIdx,\n      friendlyName: '',\n      friendlyTime: '',\n      hideInfoBox: false,\n      highlightedNodes: this.knownUrlParams.highlightedNodes != null ? this.knownUrlParams.highlightedNodes : [],\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || DEFAULT_APP_CONFIG.initialLoopTimeMinutes,\n      nodeList: [],\n      nodes: null,\n      percentThroughLoop: 0,\n      popupInfo: null,\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      timeMultiplier: 1,\n      trailLength: this.knownUrlParams.trailLength || DEFAULT_APP_CONFIG.initialTrailLength,\n      trips: null,\n      viewport: Object.assign({}, DEFAULT_APP_CONFIG.initialViewport, DEFAULT_APP_CONFIG.dataSamples[initialDataSampleIdx].initialPartialViewport)\n    };\n\n    this.timestampOffset = Date.now();\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightNodeChange = this.handleHighlightNodeChange.bind(this);\n    this.handleHighlightNodeReload = this.handleHighlightNodeReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadNodeList = this.loadNodeList.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadNodeList(this.state.dataSampleIdx);\n    this.loadGeoJsonNodes(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = this.state.appConfig.dataSamples[dataUrlIdx].tripsUrl;\n    requestJson(url, (error: any, response: TripContainer) => {\n      if (error == null) {\n        let friendlyName = this.state.appConfig.title;\n        if (response.friendlyName != null) {\n          friendlyName = response.friendlyName;\n        }\n        let startDate = new Date(Date.parse(response.startTimestamp));\n        let timeMultiplier = response.timeMultiplier;\n        let trips = response.trips;\n        let loopLength = response.loopLength;\n\n        // allocate colours if there's a small number of trips\n        if (trips.length > 0 && trips.length <= 10) {\n          for (let i = 0; i < trips.length; i++) {\n            trips[i].color = this.state.appConfig.colors[i % this.state.appConfig.colors.length];\n          }\n        }\n\n        this.timestampOffset = Date.now();\n        this.setState({\n          friendlyName: friendlyName,\n          startDate: startDate,\n          trips: trips,\n          loopLength: loopLength,\n          timeMultiplier: timeMultiplier\n        });\n      }\n    });\n  }\n\n  loadNodeList(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].nodeListUrl, (error: any, response: string[]) => {\n      if (error == null) {\n        response.sort();\n        this.setState({\n          nodeList: response\n        });\n      }\n    });\n  }\n\n  loadGeoJsonNodes(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].geoJsonUrl, (error: any, response: geojson.FeatureCollection<geojson.Point>) => {\n      if (error == null) {\n        this.setState({\n          nodes: response\n        });\n      }\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getLoopTime() {\n    return this.state.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: this.state.appConfig.initialTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({loopTimeMinutes: this.state.appConfig.initialLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightNodeChange(highlightedNodesCommaSep: ValueType<any>) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = this.state.highlightedNodes.length > highlightedNodes.length;\n    this.setState({highlightedNodes: highlightedNodes});\n    this.knownUrlParams.highlightedNodes = highlightedNodes;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedNodesRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightNodeReload() {\n    // create a new array for trips so the colours are updated\n    this.setState({trips: Object.assign([], this.state.trips)});\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any>) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      this.handleHighlightNodeChange([]);\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadNodeList(dataSampleIdx);\n      this.loadGeoJsonNodes(dataSampleIdx);\n      this.handleViewportChange(this.state.appConfig.dataSamples[dataSampleIdx].initialPartialViewport);\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  handleInfoBoxVisibility(hideInfoBox: boolean) {\n    this.setState({\n      hideInfoBox: hideInfoBox\n    });\n  }\n\n  render() {\n    const {appConfig, dataSampleIdx, friendlyName, friendlyTime, hideInfoBox, highlightedNodes, loopLength, loopTimeMinutes, nodeList, nodes, percentThroughLoop, popupInfo, trailLength, trips, viewport} = this.state;\n\n    const dataSampleOptions: any[] = this.state.appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedNodesVl: any[] = highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div className=\"popup-inner\">{this.state.appConfig.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (this.state.appConfig.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataSampleIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={this.state.appConfig.mapboxStyle}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={this.state.appConfig.mapboxToken}>\n            <DeckGLOverlay \n              color={appConfig.color}\n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightColor={appConfig.highlightColor}\n              highlightedNodes={highlightedNodes}\n              initialViewState={appConfig.initialViewport}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getLoopTime()}\n              nodes={nodes!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n          <div id=\"divinfo\" className={hideInfoBox ? \"hide\" : \"\"}>\n            <button id=\"btnHideInfoBox\" className=\"btn-transparent right-align\" onClick={() => this.handleInfoBoxVisibility(true)}>X</button>\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust loop time</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {this.state.appConfig.nodeLabelPlural}</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={false}\n                  isMulti\n                  options={nodeListOptions}\n                  onChange={this.handleHighlightNodeChange}\n                  onMenuClose={this.handleHighlightNodeReload}\n                  placeholder={\"Highlight \" + this.state.appConfig.nodeLabelPlural}\n                  value={highlightedNodesVl}\n                />\n              </div>\n            </div>\n          </div>\n          <button id=\"btnShowInfoBox\" className={\"btn-transparent \" + (hideInfoBox ? \"\" : \"hide\")} onClick={() => this.handleInfoBoxVisibility(false)}>SHOW INFO BOX</button>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}