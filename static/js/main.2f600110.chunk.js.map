{"version":3,"sources":["deckgl-overlay.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["DeckGLOverlay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animationFrame","state","currentTime","animate","bind","assertThisInitialized","getColor","window","cancelAnimationFrame","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","d","_this2","color","tagColor","nodes","highlightedNodes","length","self","forEach","n","find","hn","toLowerCase","highlightColor","_this$props","handleOnHover","initialViewState","trips","trailLength","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","onClick","info","console","log","object","properties","name","react","deckgl","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","utils","getKnownUrlParameters","result","dataSampleIdx","dataIdx","highlightNodes","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","String","queryFilters","history","pushState","DEFAULT_APP_CONFIG","defaultTitle","nodeLabel","nodeLabelPlural","dataSamples","title","tripsUrl","process","geoJsonUrl","nodeListUrl","initialPartialViewport","latitude","longitude","zoom","mapboxStyle","colors","defaultLoopTimeMinutes","defaultTrailLength","mapboxToken","initialViewport","maxZoom","pitch","bearing","width","height","App","knownUrlParams","intervalId","Utils","initialDataSampleIdx","appConfig","friendlyName","startDate","loopTimeMinutes","timeMultiplier","friendlyTime","percentThroughLoop","nodeList","popupInfo","assign","handleDataChange","handleHighlightNodeChange","handleHighlightNodeReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadTrips","loadNodeList","updateBoxInfo","addEventListener","resize","loadGeoJsonNodes","setInterval","clearInterval","dataUrlIdx","_this3","url","requestJson","error","response","parse","startTimestamp","_this4","sort","_this5","getLoopTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedNodesCommaSep","highlightedNodesRemoved","dataSampleOption","handleViewportChange","innerWidth","innerHeight","_this$state","dataSampleOptions","idx","label","nodeListOptions","highlightedNodesVl","loader","loader_Loader","popupEle","esm","geometry","closeButton","closeOnClick","anchor","selectDataEle","react_select_browser_esm","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","placeholder","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f600110.chunk.js","sourcesContent":["import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState, Waypoint} from './data-interfaces';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this.animationFrame = null;\n\n    this.animate = this.animate.bind(this);\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrame != null) {\n      window.cancelAnimationFrame(this.animationFrame);\n    }\n  }\n\n  animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this.animationFrame = window.requestAnimationFrame(this.animate.bind(this));\n  }\n  \n  getColor(d: Trip) {\n    let color = this.props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (this.props.highlightedNodes.length > 0) {\n        let self = this;\n        d.nodes.forEach((n: string) => {\n          if (self.props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = this.props.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color;\n  }\n\n  render() {\n    const {handleOnHover, initialViewState, nodes, trips, trailLength, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates),\n        getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.3,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (nodes != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: nodes,\n        filled: true,\n        getFillColor: () => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 100,\n        getRadius: () => 0.4,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport default {\n  getKnownUrlParameters(): KnownUrlParameters {\n    let result: KnownUrlParameters = {\n      dataSampleIdx: null,\n      loopTime: null,\n      trailLength: null,\n      highlightedNodes: null\n    };\n\n    // Convert day to dataUrlIdx\n    let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n    if (dataIdx != null && dataIdx >= 0) {\n      result.dataSampleIdx = dataIdx;\n    }\n\n    // Validate loopTime\n    let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n    if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n      result.loopTime = loopTime;\n    }\n\n    // Validate trailLength\n    let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n    if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n      result.trailLength = trailLength;\n    }\n\n    // Validate highlightNode\n    let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n    if (highlightNodes != null && highlightNodes.length > 0) {\n      result.highlightedNodes = highlightNodes.split(',');\n    }\n\n    return result;\n  },\n\n  updateUrlParameters(params: KnownUrlParameters) {\n    let newStateStr = decodeURIComponent(window.location.search.substring(1));\n    if (params.dataSampleIdx != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n    }\n    if (params.loopTime != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n    }\n    if (params.trailLength != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n    }\n    if (params.highlightedNodes != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n    }\n    \n    let queryFilters = \"?\" + newStateStr;\n    window.history.pushState({}, \"\", queryFilters);\n  }\n}","import { AppConfig } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_CONFIG: AppConfig = {\n    defaultTitle: \"Trips\",\n    nodeLabel: \"Stop\",\n    nodeLabelPlural: 'Stops',\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            initialPartialViewport: {\n                latitude: -27.44,\n                longitude: 153.05,\n                zoom: 11\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            initialPartialViewport: {\n                latitude: -26.65,\n                longitude: 153.02,\n                zoom: 10\n            }\n        }\n    ],\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    highlightColor: [253, 128, 93], // orange\n    defaultLoopTimeMinutes: 1,\n    defaultTrailLength: 100,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    initialViewport: {\n        latitude: -27.44,\n        longitude: 153.05,\n        zoom: 11,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    }\n};","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport {json as requestJson} from 'd3-request';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType, ActionMeta } from 'react-select/src/types';\nimport { DEFAULT_APP_CONFIG } from './default-app-config';\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  timestampOffset: number;\n  knownUrlParams: KnownUrlParameters;\n  intervalId: any;\n\n  constructor(props: any) {\n    super(props);\n\n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      appConfig: DEFAULT_APP_CONFIG,\n      friendlyName: '',\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      trips: null,\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || DEFAULT_APP_CONFIG.defaultLoopTimeMinutes,\n      timeMultiplier: 1,\n      friendlyTime: '',\n      trailLength: this.knownUrlParams.trailLength || DEFAULT_APP_CONFIG.defaultTrailLength,\n      percentThroughLoop: 0,\n      highlightedNodes: this.knownUrlParams.highlightedNodes != null ? this.knownUrlParams.highlightedNodes : [],\n      dataSampleIdx: initialDataSampleIdx,\n      nodeList: [],\n      nodes: null,\n      popupInfo: null,\n      viewport: Object.assign({}, DEFAULT_APP_CONFIG.initialViewport, DEFAULT_APP_CONFIG.dataSamples[initialDataSampleIdx].initialPartialViewport)\n    };\n\n    this.timestampOffset = Date.now();\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightNodeChange = this.handleHighlightNodeChange.bind(this);\n    this.handleHighlightNodeReload = this.handleHighlightNodeReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.loadNodeList = this.loadNodeList.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadNodeList(this.state.dataSampleIdx);\n    this.loadGeoJsonNodes(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = this.state.appConfig.dataSamples[dataUrlIdx].tripsUrl;\n    requestJson(url, (error: any, response: TripContainer) => {\n      if (error == null) {\n        let friendlyName = this.state.appConfig.defaultTitle;\n        if (response.friendlyName != null) {\n          friendlyName = response.friendlyName;\n        }\n        let startDate = new Date(Date.parse(response.startTimestamp));\n        let timeMultiplier = response.timeMultiplier;\n        let trips = response.trips;\n        let loopLength = response.loopLength;\n\n        // allocate colours if there's a small number of trips\n        if (trips.length > 0 && trips.length <= 10) {\n          for (let i = 0; i < trips.length; i++) {\n            trips[i].color = this.state.appConfig.colors[i % this.state.appConfig.colors.length];\n          }\n        }\n\n        this.timestampOffset = Date.now();\n        this.setState({\n          friendlyName: friendlyName,\n          startDate: startDate,\n          trips: trips,\n          loopLength: loopLength,\n          timeMultiplier: timeMultiplier\n        });\n      }\n    });\n  }\n\n  loadNodeList(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].nodeListUrl, (error: any, response: string[]) => {\n      if (error == null) {\n        response.sort();\n        this.setState({\n          nodeList: response\n        });\n      }\n    });\n  }\n\n  loadGeoJsonNodes(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].geoJsonUrl, (error: any, response: geojson.FeatureCollection<geojson.Point>) => {\n      if (error == null) {\n        this.setState({\n          nodes: response\n        });\n      }\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getLoopTime() {\n    return this.state.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: this.state.appConfig.defaultTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({loopTimeMinutes: this.state.appConfig.defaultLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightNodeChange(highlightedNodesCommaSep: ValueType<any>) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = this.state.highlightedNodes.length > highlightedNodes.length;\n    this.setState({highlightedNodes: highlightedNodes});\n    this.knownUrlParams.highlightedNodes = highlightedNodes;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedNodesRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightNodeReload() {\n    // create a new array for trips so the colours are updated\n    this.setState({trips: Object.assign([], this.state.trips)});\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any>) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      this.handleHighlightNodeChange([]);\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadNodeList(dataSampleIdx);\n      this.loadGeoJsonNodes(dataSampleIdx);\n      this.handleViewportChange(this.state.appConfig.dataSamples[dataSampleIdx].initialPartialViewport);\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  render() {\n    const {appConfig, friendlyName, trips, friendlyTime, loopLength, loopTimeMinutes, trailLength, percentThroughLoop, highlightedNodes, nodeList, dataSampleIdx: dataUrlIdx, nodes, popupInfo, viewport} = this.state;\n\n    const dataSampleOptions: any[] = this.state.appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedNodesVl: any[] = highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div>{this.state.appConfig.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (this.state.appConfig.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataUrlIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={this.state.appConfig.mapboxStyle}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={this.state.appConfig.mapboxToken}>\n            <DeckGLOverlay \n              color={appConfig.color}\n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightColor={appConfig.highlightColor}\n              highlightedNodes={highlightedNodes}\n              initialViewState={appConfig.initialViewport}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getLoopTime()}\n              nodes={nodes!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n          <div id=\"divinfo\">\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust loop time</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {this.state.appConfig.nodeLabelPlural}</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={false}\n                  isMulti\n                  options={nodeListOptions}\n                  onChange={this.handleHighlightNodeChange}\n                  onMenuClose={this.handleHighlightNodeReload}\n                  placeholder={\"Highlight \" + this.state.appConfig.nodeLabelPlural}\n                  value={highlightedNodesVl}\n                />\n              </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}