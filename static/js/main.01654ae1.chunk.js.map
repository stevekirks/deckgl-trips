{"version":3,"sources":["app-config.ts","deckgl-overlay.tsx","loader.tsx","utils.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["CURRENT_APP_CONFIG","name","defaultTitle","dataSamples","title","tripsUrl","process","geoJsonUrl","stopListUrl","getInitialPartialViewport","latitude","longitude","zoom","mapboxStyle","color","colors","highlightColor","defaultLoopTimeMinutes","defaultTrailLength","mapboxToken","getInitialViewport","maxZoom","pitch","bearing","width","height","DeckGLOverlay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_animationFrame","state","currentTime","getColor","bind","assertThisInitialized","_animate","window","cancelAnimationFrame","d","tagColor","stops","highlightedStops","length","self","forEach","n","find","hn","toLowerCase","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","_this$props","trips","trailLength","handleOnHover","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","onClick","info","console","log","object","properties","react","deckgl","initialViewState","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","utils","getKnownUrlParameters","result","dataSampleIdx","dataIdx","highlightStops","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","String","queryFilters","history","pushState","App","knownUrlParams","highlighedStopsChangedBeforeReload","intervalId","Utils","initialDataSampleIdx","friendlyName","startDate","loopTimeMinutes","timeMultiplier","friendlyTime","percentThroughLoop","stopList","popupInfo","assign","handleDataChange","handleHighlightStopChange","handleHighlightStopReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadTrips","loadStopList","updateBoxInfo","_this2","addEventListener","resize","loadGeoJsonStops","setInterval","clearInterval","dataUrlIdx","_this3","url","requestJson","error","response","parse","startTimestamp","_this4","sort","_this5","getLoopTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedStopsCommaSep","action","highlightedStopsRemoved","_this6","cacheTrips","setTimeout","dataSampleOption","handleViewportChange","innerWidth","innerHeight","_this$state","dataSampleOptions","idx","label","stopListOptions","highlightedStopsVl","loader","loader_Loader","popupEle","esm","geometry","closeButton","closeOnClick","anchor","selectDataEle","react_select_browser_esm","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","placeholder","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01654ae1.chunk.js","sourcesContent":["import { AppConfig } from \"./data-interfaces\";\n\nexport const CURRENT_APP_CONFIG: AppConfig = {\n    name: \"Default\",\n    defaultTitle: \"Trips\",\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            stopListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            getInitialPartialViewport: () => {\n                return {\n                    latitude: -27.44,\n                    longitude: 153.05,\n                    zoom: 11\n                };\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            stopListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            getInitialPartialViewport: () => {\n                return {\n                    latitude: -26.65,\n                    longitude: 153.02,\n                    zoom: 10\n                };\n            }\n        }\n    ],\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    highlightColor: [253, 128, 93], // orange\n    defaultLoopTimeMinutes: 1,\n    defaultTrailLength: 100,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    getInitialViewport: () => {\n        return {\n            latitude: -27.44,\n            longitude: 153.05,\n            zoom: 11,\n            maxZoom: 20,\n            pitch: 45,\n            bearing: 0,\n            width: 500,\n            height: 500\n        };\n    }\n};","import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState} from './data-interfaces';\nimport { CURRENT_APP_CONFIG } from './app-config';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  _animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this._animationFrame = null;\n\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this._animate();\n  }\n\n  componentWillUnmount() {\n    if (this._animationFrame != null) {\n      window.cancelAnimationFrame(this._animationFrame);\n    }\n  }\n  \n  getColor(d: Trip) {\n    let color = CURRENT_APP_CONFIG.color;\n\n    let tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (CURRENT_APP_CONFIG.highlightColor != null && d.stops != null) {\n      if (this.props.highlightedStops.length > 0) {\n        let self = this;\n        d.stops.forEach((n: string) => {\n          if (self.props.highlightedStops.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = CURRENT_APP_CONFIG.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color;\n  }\n\n  _animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n\n      // 432000 == 5 days\n\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n  }\n\n  render() {\n    const {trips, trailLength, stops, handleOnHover, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: any) => d.segments.map((p: any) => p.coordinates),\n        getTimestamps: (d: any) => d.segments.map((p: any) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.3,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (stops != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: stops,\n        filled: true,\n        getFillColor: (d: any) => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 100,\n        getRadius: (d: any) => 0.4,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={CURRENT_APP_CONFIG.getInitialViewport()}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTSTOPS = 'highlightStops';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport default {\n  getKnownUrlParameters(): KnownUrlParameters {\n    let result: KnownUrlParameters = {\n      dataSampleIdx: null,\n      loopTime: null,\n      trailLength: null,\n      highlightedStops: null\n    };\n\n    // Convert day to dataUrlIdx\n    let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n    if (dataIdx != null && dataIdx >= 0) {\n      result.dataSampleIdx = dataIdx;\n    }\n\n    // Validate loopTime\n    let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n    if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n      result.loopTime = loopTime;\n    }\n\n    // Validate trailLength\n    let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n    if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n      result.trailLength = trailLength;\n    }\n\n    // Validate highlightStop\n    let highlightStops = getUrlParam(PARAM_HIGHLIGHTSTOPS);\n    if (highlightStops != null && highlightStops.length > 0) {\n      result.highlightedStops = highlightStops.split(',');\n    }\n\n    return result;\n  },\n\n  updateUrlParameters(params: KnownUrlParameters) {\n    let newStateStr = decodeURIComponent(window.location.search.substring(1));\n    if (params.dataSampleIdx != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n    }\n    if (params.loopTime != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n    }\n    if (params.trailLength != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n    }\n    if (params.highlightedStops != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTSTOPS, params.highlightedStops.join(','));\n    }\n    \n    let queryFilters = \"?\" + newStateStr;\n    window.history.pushState({}, \"\", queryFilters);\n  }\n}","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport {json as requestJson} from 'd3-request';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType, ActionMeta } from 'react-select/src/types';\nimport { CURRENT_APP_CONFIG } from './app-config';\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  timestampOffset: number;\n  knownUrlParams: KnownUrlParameters;\n  highlighedStopsChangedBeforeReload: boolean;\n  intervalId: any;\n\n  constructor(props: any) {\n    super(props);\n\n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      friendlyName: '',\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      trips: null,\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || CURRENT_APP_CONFIG.defaultLoopTimeMinutes,\n      timeMultiplier: 1,\n      friendlyTime: '',\n      trailLength: this.knownUrlParams.trailLength || CURRENT_APP_CONFIG.defaultTrailLength,\n      percentThroughLoop: 0,\n      highlightedStops: this.knownUrlParams.highlightedStops != null ? this.knownUrlParams.highlightedStops : [],\n      dataSampleIdx: initialDataSampleIdx,\n      stopList: [],\n      stops: null,\n      popupInfo: null,\n      viewport: Object.assign({}, CURRENT_APP_CONFIG.getInitialViewport(), CURRENT_APP_CONFIG.dataSamples[initialDataSampleIdx].getInitialPartialViewport()) \n    };\n\n    this.timestampOffset = Date.now();\n    this.highlighedStopsChangedBeforeReload = false;\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightStopChange = this.handleHighlightStopChange.bind(this);\n    this.handleHighlightStopReload = this.handleHighlightStopReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.loadStopList = this.loadStopList.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadStopList(this.state.dataSampleIdx);\n    this.loadGeoJsonStops(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].tripsUrl;\n    requestJson(url, (error: any, response: TripContainer) => {\n      if (error == null) {\n        let friendlyName = CURRENT_APP_CONFIG.defaultTitle;\n        if (response.friendlyName != null) {\n          friendlyName = response.friendlyName;\n        }\n        let startDate = new Date(Date.parse(response.startTimestamp));\n        let timeMultiplier = response.timeMultiplier;\n        let trips = response.trips;\n        let loopLength = response.loopLength;\n\n        // allocate colours if there's a small number of trips\n        if (trips.length > 0 && trips.length <= 10) {\n          for (let i = 0; i < trips.length; i++) {\n            trips[i].color = CURRENT_APP_CONFIG.colors[i % CURRENT_APP_CONFIG.colors.length];\n          }\n        }\n\n        this.timestampOffset = Date.now();\n        this.setState({\n          friendlyName: friendlyName,\n          startDate: startDate,\n          trips: trips,\n          loopLength: loopLength,\n          timeMultiplier: timeMultiplier\n        });\n      }\n    });\n  }\n\n  loadStopList(dataUrlIdx: number) {\n    requestJson(CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].stopListUrl, (error: any, response: any) => {\n      if (error == null) {\n        let stops = response as string[];\n        stops.sort();\n        this.setState({\n          stopList: stops\n        });\n      }\n    });\n  }\n\n  loadGeoJsonStops(dataUrlIdx: number) {\n    requestJson(CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].geoJsonUrl, (error: any, response: any) => {\n      if (error == null) {\n        let stops = response as geojson.FeatureCollection<geojson.Point>;\n        this.setState({\n          stops: stops\n        });\n      }\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getLoopTime() {\n    return this.state.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: CURRENT_APP_CONFIG.defaultTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({loopTimeMinutes: CURRENT_APP_CONFIG.defaultLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightStopChange(highlightedStopsCommaSep: ValueType<any>, action: ActionMeta) {\n    if (highlightedStopsCommaSep == null) {\n      highlightedStopsCommaSep = [];\n    }\n    let highlightedStops: string[] = highlightedStopsCommaSep.map((n: any) => n.value);\n    let highlightedStopsRemoved = this.state.highlightedStops.length > highlightedStops.length;\n    if (this.state.highlightedStops.length !== highlightedStops.length) {\n      this.highlighedStopsChangedBeforeReload = true;\n    }\n    this.setState({highlightedStops: highlightedStops});\n    this.knownUrlParams.highlightedStops = highlightedStops;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedStopsRemoved) {\n      this.handleHighlightStopReload();\n    }\n  }\n\n  handleHighlightStopReload() {\n    if (this.highlighedStopsChangedBeforeReload === true) {\n      // a forceUpdate doesn't update the trip colours, so remove and re-add\n      let cacheTrips = this.state.trips;\n      this.setState({trips: null});\n      setTimeout(() => {\n        this.highlighedStopsChangedBeforeReload = false;\n        this.setState({trips: cacheTrips});\n      }, 200);\n    }\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any>, action: ActionMeta) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadStopList(dataSampleIdx);\n      this.loadGeoJsonStops(dataSampleIdx);\n      this.handleViewportChange(CURRENT_APP_CONFIG.dataSamples[dataSampleIdx].getInitialPartialViewport());\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  render() {\n    const {friendlyName, trips, friendlyTime, loopLength, loopTimeMinutes, trailLength, percentThroughLoop, highlightedStops, stopList, dataSampleIdx: dataUrlIdx, stops, popupInfo, viewport} = this.state;\n\n    const dataSampleOptions: any[] = CURRENT_APP_CONFIG.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const stopListOptions: any[] = stopList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedStopsVl: any[] = highlightedStops.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div>Bus Stop {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (CURRENT_APP_CONFIG.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataUrlIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={CURRENT_APP_CONFIG.mapboxStyle}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={CURRENT_APP_CONFIG.mapboxToken}>\n            <DeckGLOverlay \n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightedStops={highlightedStops}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getLoopTime()}\n              stops={stops!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n          <div id=\"divinfo\">\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust loop time</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight Stops</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={false}\n                  isMulti\n                  options={stopListOptions}\n                  onChange={this.handleHighlightStopChange}\n                  onMenuClose={this.handleHighlightStopReload}\n                  placeholder=\"Highlight stop(s)\"\n                  value={highlightedStopsVl}\n                />\n              </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}