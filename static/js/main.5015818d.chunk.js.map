{"version":3,"sources":["deckgl-overlay.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["DeckGLOverlay","props","animationFrame","state","currentTime","animate","bind","getColor","this","window","cancelAnimationFrame","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","d","color","tagColor","nodes","highlightedNodes","length","self","forEach","n","find","hn","toLowerCase","highlightColor","handleOnHover","initialViewState","trips","trailLength","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","onClick","info","console","log","object","properties","name","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","PARAM_DATA_IDX","PARAM_LOOPTIME","PARAM_TRAILLENGTH","PARAM_HIGHLIGHTNODES","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","dataSampleIdx","String","queryFilters","history","pushState","DEFAULT_APP_CONFIG","colors","dataSamples","title","tripsUrl","process","geoJsonUrl","nodeListUrl","initialPartialViewport","latitude","longitude","zoom","initialLoopTimeMinutes","initialTrailLength","initialViewport","maxZoom","pitch","bearing","width","height","mapboxStyle","mapboxToken","nodeLabel","nodeLabelPlural","mapboxgl","workerClass","require","default","App","intervalId","knownUrlParams","result","dataIdx","highlightNodes","Utils","initialDataSampleIdx","appConfig","friendlyName","friendlyTime","hideInfoBox","loopTimeMinutes","nodeList","percentThroughLoop","popupInfo","startDate","timeMultiplier","Object","assign","handleDataChange","handleHighlightNodeChange","handleHighlightNodeReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadNodeList","loadTrips","updateBoxInfo","addEventListener","resize","loadGeoJsonNodes","setInterval","clearInterval","dataUrlIdx","url","_this","fetch","method","headers","then","fetchResponse","status","json","response","startTimestamp","parse","catch","error","sort","getLoopTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedNodesCommaSep","highlightedNodesRemoved","dataSampleOption","handleViewportChange","innerWidth","innerHeight","dataSampleOptions","idx","nodeListOptions","highlightedNodesVl","loader","popupEle","geometry","closeButton","closeOnClick","anchor","selectDataEle","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","handleInfoBoxVisibility","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5015818d.chunk.js","sourcesContent":["import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState, Waypoint} from './data-interfaces';\nimport { RGBAColor, Position } from '@deck.gl/core';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this.animationFrame = null;\n\n    this.animate = this.animate.bind(this);\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrame != null) {\n      window.cancelAnimationFrame(this.animationFrame);\n    }\n  }\n\n  animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this.animationFrame = window.requestAnimationFrame(this.animate.bind(this));\n  }\n  \n  getColor(d: Trip) {\n    let color = this.props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (this.props.highlightedNodes.length > 0) {\n        let self = this;\n        d.nodes.forEach((n: string) => {\n          if (self.props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = this.props.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color as RGBAColor;\n  }\n\n  render() {\n    const {handleOnHover, initialViewState, nodes, trips, trailLength, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates as Position),\n        getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.3,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (nodes != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: nodes,\n        filled: true,\n        getFillColor: () => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 100,\n        getRadius: () => 0.4,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport function getKnownUrlParameters(): KnownUrlParameters {\n  let result: KnownUrlParameters = {\n    dataSampleIdx: null,\n    loopTime: null,\n    trailLength: null,\n    highlightedNodes: null\n  };\n\n  // Convert day to dataUrlIdx\n  let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n  if (dataIdx != null && dataIdx >= 0) {\n    result.dataSampleIdx = dataIdx;\n  }\n\n  // Validate loopTime\n  let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n  if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n    result.loopTime = loopTime;\n  }\n\n  // Validate trailLength\n  let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n  if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n    result.trailLength = trailLength;\n  }\n\n  // Validate highlightNode\n  let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n  if (highlightNodes != null && highlightNodes.length > 0) {\n    result.highlightedNodes = highlightNodes.split(',');\n  }\n\n  return result;\n}\n\nexport function updateUrlParameters(params: KnownUrlParameters) {\n  let newStateStr = decodeURIComponent(window.location.search.substring(1));\n  if (params.dataSampleIdx != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n  }\n  if (params.loopTime != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n  }\n  if (params.trailLength != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n  }\n  if (params.highlightedNodes != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n  }\n  \n  let queryFilters = \"?\" + newStateStr;\n  window.history.pushState({}, \"\", queryFilters);\n}","import { AppConfig } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_CONFIG: AppConfig = {\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            initialPartialViewport: {\n                latitude: -27.44,\n                longitude: 153.05,\n                zoom: 11\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            initialPartialViewport: {\n                latitude: -26.65,\n                longitude: 153.02,\n                zoom: 10\n            }\n        }\n    ],\n    highlightColor: [253, 128, 93], // orange\n    initialLoopTimeMinutes: 3,\n    initialTrailLength: 100,\n    initialViewport: {\n        latitude: -27.44,\n        longitude: 153.05,\n        zoom: 11,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    },\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    nodeLabel: \"Stop\",\n    nodeLabelPlural: 'Stops',\n    title: \"Trips\"\n};","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport * as Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType } from 'react-select/src/types';\nimport { DEFAULT_APP_CONFIG } from './default-app-config';\n\n// Workaround: next 4 lines are to fix issue https://github.com/mapbox/mapbox-gl-js/issues/10565\n// Install packages worker-loader & mapbox-gl\nimport mapboxgl from \"mapbox-gl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n(mapboxgl as any).workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  intervalId: any;\n  knownUrlParams: KnownUrlParameters;\n  timestampOffset: number;\n\n  constructor(props: any) {\n    super(props);\n    \n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      appConfig: DEFAULT_APP_CONFIG,\n      dataSampleIdx: initialDataSampleIdx,\n      friendlyName: '',\n      friendlyTime: '',\n      hideInfoBox: false,\n      highlightedNodes: this.knownUrlParams.highlightedNodes != null ? this.knownUrlParams.highlightedNodes : [],\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || DEFAULT_APP_CONFIG.initialLoopTimeMinutes,\n      nodeList: [],\n      nodes: null,\n      percentThroughLoop: 0,\n      popupInfo: null,\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      timeMultiplier: 1,\n      trailLength: this.knownUrlParams.trailLength || DEFAULT_APP_CONFIG.initialTrailLength,\n      trips: null,\n      viewport: Object.assign({}, DEFAULT_APP_CONFIG.initialViewport, DEFAULT_APP_CONFIG.dataSamples[initialDataSampleIdx].initialPartialViewport)\n    };\n\n    this.timestampOffset = Date.now();\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightNodeChange = this.handleHighlightNodeChange.bind(this);\n    this.handleHighlightNodeReload = this.handleHighlightNodeReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadNodeList = this.loadNodeList.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadNodeList(this.state.dataSampleIdx);\n    this.loadGeoJsonNodes(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = this.state.appConfig.dataSamples[dataUrlIdx].tripsUrl;\n    let _this: App = this;\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            \"Accept\": \"application/json; charset=utf-8\"\n        }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: TripContainer) => {\n            let friendlyName = _this.state.appConfig.title;\n            if (response.friendlyName != null) {\n              friendlyName = response.friendlyName;\n            }\n            let startDate = Number(response.startTimestamp) \n              ? new Date(response.startTimestamp as number * 1000)\n              : new Date(Date.parse(response.startTimestamp as string));\n            let timeMultiplier = response.timeMultiplier;\n            let trips = response.trips;\n            let loopLength = response.loopLength;\n\n            // allocate colours if there's a small number of trips\n            if (trips.length > 0 && trips.length <= 10) {\n              for (let i = 0; i < trips.length; i++) {\n                trips[i].color = _this.state.appConfig.colors[i % _this.state.appConfig.colors.length];\n              }\n            }\n\n            _this.timestampOffset = Date.now();\n            _this.setState({\n              friendlyName: friendlyName,\n              startDate: startDate,\n              trips: trips,\n              loopLength: loopLength,\n              timeMultiplier: timeMultiplier\n            });\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  loadNodeList(dataUrlIdx: number) {\n    let _this: App = this;\n    fetch(this.state.appConfig.dataSamples[dataUrlIdx].nodeListUrl, {\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: string[]) => {\n            response.sort();\n            _this.setState({\n              nodeList: response\n            });\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  loadGeoJsonNodes(dataUrlIdx: number) {\n    let _this: App = this;\n    fetch(this.state.appConfig.dataSamples[dataUrlIdx].geoJsonUrl, {\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: geojson.FeatureCollection<geojson.Point>) => {\n            _this.setState({\n              nodes: response\n            });\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getLoopTime() {\n    return this.state.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: this.state.appConfig.initialTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({loopTimeMinutes: this.state.appConfig.initialLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightNodeChange(highlightedNodesCommaSep: ValueType<any, any>) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = this.state.highlightedNodes.length > highlightedNodes.length;\n    this.setState({highlightedNodes: highlightedNodes});\n    this.knownUrlParams.highlightedNodes = highlightedNodes;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedNodesRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightNodeReload() {\n    // create a new array for trips so the colours are updated\n    this.setState({trips: Object.assign([], this.state.trips)});\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any, any>) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      this.handleHighlightNodeChange([]);\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadNodeList(dataSampleIdx);\n      this.loadGeoJsonNodes(dataSampleIdx);\n      this.handleViewportChange(this.state.appConfig.dataSamples[dataSampleIdx].initialPartialViewport);\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  handleInfoBoxVisibility(hideInfoBox: boolean) {\n    this.setState({\n      hideInfoBox: hideInfoBox\n    });\n  }\n\n  render() {\n    const {appConfig, dataSampleIdx, friendlyName, friendlyTime, hideInfoBox, highlightedNodes, loopLength, loopTimeMinutes, nodeList, nodes, percentThroughLoop, popupInfo, trailLength, trips, viewport} = this.state;\n\n    const dataSampleOptions: any[] = this.state.appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedNodesVl: any[] = highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div className=\"popup-inner\">{this.state.appConfig.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (this.state.appConfig.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataSampleIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={this.state.appConfig.mapboxStyle}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={this.state.appConfig.mapboxToken}>\n            <DeckGLOverlay \n              color={appConfig.color}\n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightColor={appConfig.highlightColor}\n              highlightedNodes={highlightedNodes}\n              initialViewState={appConfig.initialViewport}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getLoopTime()}\n              nodes={nodes!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n          <div id=\"divinfo\" className={hideInfoBox ? \"hide\" : \"\"}>\n            <button id=\"btnHideInfoBox\" className=\"btn-transparent right-align\" onClick={() => this.handleInfoBoxVisibility(true)}>X</button>\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust loop time</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {this.state.appConfig.nodeLabelPlural}</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={false}\n                  isMulti\n                  options={nodeListOptions}\n                  onChange={this.handleHighlightNodeChange}\n                  onMenuClose={this.handleHighlightNodeReload}\n                  placeholder={\"Highlight \" + this.state.appConfig.nodeLabelPlural}\n                  value={highlightedNodesVl}\n                />\n              </div>\n            </div>\n          </div>\n          <button id=\"btnShowInfoBox\" className={\"btn-transparent \" + (hideInfoBox ? \"\" : \"hide\")} onClick={() => this.handleInfoBoxVisibility(false)}>SHOW INFO BOX</button>\n        </div>\n      </div>\n    );\n  }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}