{"version":3,"sources":["app-config.ts","deckgl-overlay.tsx","loader.tsx","utils.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["CURRENT_APP_CONFIG","defaultTitle","nodeLabel","nodeLabelPlural","dataSamples","title","tripsUrl","process","geoJsonUrl","nodeListUrl","getInitialPartialViewport","latitude","longitude","zoom","mapboxStyle","color","colors","highlightColor","defaultLoopTimeMinutes","defaultTrailLength","mapboxToken","getInitialViewport","maxZoom","pitch","bearing","width","height","DeckGLOverlay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animationFrame","state","currentTime","animate","bind","assertThisInitialized","getColor","window","cancelAnimationFrame","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","d","tagColor","nodes","highlightedNodes","length","self","forEach","n","find","hn","toLowerCase","_this$props","trips","trailLength","handleOnHover","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","onClick","info","console","log","object","properties","name","react","deckgl","initialViewState","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","utils","getKnownUrlParameters","result","dataSampleIdx","dataIdx","highlightNodes","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","String","queryFilters","history","pushState","App","knownUrlParams","intervalId","Utils","initialDataSampleIdx","friendlyName","startDate","loopTimeMinutes","timeMultiplier","friendlyTime","percentThroughLoop","nodeList","popupInfo","assign","handleDataChange","handleHighlightNodeChange","handleHighlightNodeReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadTrips","loadNodeList","updateBoxInfo","_this2","addEventListener","resize","loadGeoJsonNodes","setInterval","clearInterval","dataUrlIdx","_this3","url","requestJson","error","response","parse","startTimestamp","_this4","sort","_this5","getLoopTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedNodesCommaSep","action","highlightedNodesRemoved","dataSampleOption","handleViewportChange","innerWidth","innerHeight","_this$state","dataSampleOptions","idx","label","nodeListOptions","highlightedNodesVl","loader","loader_Loader","popupEle","esm","geometry","closeButton","closeOnClick","anchor","selectDataEle","react_select_browser_esm","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","placeholder","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.666592d3.chunk.js","sourcesContent":["import { AppConfig } from \"./data-interfaces\";\n\nexport const CURRENT_APP_CONFIG: AppConfig = {\n    defaultTitle: \"Trips\",\n    nodeLabel: \"Stop\",\n    nodeLabelPlural: 'Stops',\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            getInitialPartialViewport: () => {\n                return {\n                    latitude: -27.44,\n                    longitude: 153.05,\n                    zoom: 11\n                };\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            getInitialPartialViewport: () => {\n                return {\n                    latitude: -26.65,\n                    longitude: 153.02,\n                    zoom: 10\n                };\n            }\n        }\n    ],\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    highlightColor: [253, 128, 93], // orange\n    defaultLoopTimeMinutes: 1,\n    defaultTrailLength: 100,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    getInitialViewport: () => {\n        return {\n            latitude: -27.44,\n            longitude: 153.05,\n            zoom: 11,\n            maxZoom: 20,\n            pitch: 45,\n            bearing: 0,\n            width: 500,\n            height: 500\n        };\n    }\n};","import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState} from './data-interfaces';\nimport { CURRENT_APP_CONFIG } from './app-config';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this.animationFrame = null;\n\n    this.animate = this.animate.bind(this);\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrame != null) {\n      window.cancelAnimationFrame(this.animationFrame);\n    }\n  }\n\n  animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n\n      // 432000 == 5 days\n\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this.animationFrame = window.requestAnimationFrame(this.animate.bind(this));\n  }\n  \n  getColor(d: Trip) {\n    let color = CURRENT_APP_CONFIG.color;\n\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (this.props.highlightedNodes.length > 0) {\n        let self = this;\n        d.nodes.forEach((n: string) => {\n          if (self.props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = CURRENT_APP_CONFIG.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color;\n  }\n\n  render() {\n    const {trips, trailLength, nodes, handleOnHover, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: any) => d.segments.map((p: any) => p.coordinates),\n        getTimestamps: (d: any) => d.segments.map((p: any) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.3,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (nodes != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: nodes,\n        filled: true,\n        getFillColor: (d: any) => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 100,\n        getRadius: (d: any) => 0.4,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={CURRENT_APP_CONFIG.getInitialViewport()}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport default {\n  getKnownUrlParameters(): KnownUrlParameters {\n    let result: KnownUrlParameters = {\n      dataSampleIdx: null,\n      loopTime: null,\n      trailLength: null,\n      highlightedNodes: null\n    };\n\n    // Convert day to dataUrlIdx\n    let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n    if (dataIdx != null && dataIdx >= 0) {\n      result.dataSampleIdx = dataIdx;\n    }\n\n    // Validate loopTime\n    let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n    if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n      result.loopTime = loopTime;\n    }\n\n    // Validate trailLength\n    let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n    if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n      result.trailLength = trailLength;\n    }\n\n    // Validate highlightNode\n    let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n    if (highlightNodes != null && highlightNodes.length > 0) {\n      result.highlightedNodes = highlightNodes.split(',');\n    }\n\n    return result;\n  },\n\n  updateUrlParameters(params: KnownUrlParameters) {\n    let newStateStr = decodeURIComponent(window.location.search.substring(1));\n    if (params.dataSampleIdx != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n    }\n    if (params.loopTime != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n    }\n    if (params.trailLength != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n    }\n    if (params.highlightedNodes != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n    }\n    \n    let queryFilters = \"?\" + newStateStr;\n    window.history.pushState({}, \"\", queryFilters);\n  }\n}","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport {json as requestJson} from 'd3-request';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType, ActionMeta } from 'react-select/src/types';\nimport { CURRENT_APP_CONFIG } from './app-config';\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  timestampOffset: number;\n  knownUrlParams: KnownUrlParameters;\n  intervalId: any;\n\n  constructor(props: any) {\n    super(props);\n\n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      friendlyName: '',\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      trips: null,\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || CURRENT_APP_CONFIG.defaultLoopTimeMinutes,\n      timeMultiplier: 1,\n      friendlyTime: '',\n      trailLength: this.knownUrlParams.trailLength || CURRENT_APP_CONFIG.defaultTrailLength,\n      percentThroughLoop: 0,\n      highlightedNodes: this.knownUrlParams.highlightedNodes != null ? this.knownUrlParams.highlightedNodes : [],\n      dataSampleIdx: initialDataSampleIdx,\n      nodeList: [],\n      nodes: null,\n      popupInfo: null,\n      viewport: Object.assign({}, CURRENT_APP_CONFIG.getInitialViewport(), CURRENT_APP_CONFIG.dataSamples[initialDataSampleIdx].getInitialPartialViewport()) \n    };\n\n    this.timestampOffset = Date.now();\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightNodeChange = this.handleHighlightNodeChange.bind(this);\n    this.handleHighlightNodeReload = this.handleHighlightNodeReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.loadNodeList = this.loadNodeList.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadNodeList(this.state.dataSampleIdx);\n    this.loadGeoJsonNodes(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].tripsUrl;\n    requestJson(url, (error: any, response: TripContainer) => {\n      if (error == null) {\n        let friendlyName = CURRENT_APP_CONFIG.defaultTitle;\n        if (response.friendlyName != null) {\n          friendlyName = response.friendlyName;\n        }\n        let startDate = new Date(Date.parse(response.startTimestamp));\n        let timeMultiplier = response.timeMultiplier;\n        let trips = response.trips;\n        let loopLength = response.loopLength;\n\n        // allocate colours if there's a small number of trips\n        if (trips.length > 0 && trips.length <= 10) {\n          for (let i = 0; i < trips.length; i++) {\n            trips[i].color = CURRENT_APP_CONFIG.colors[i % CURRENT_APP_CONFIG.colors.length];\n          }\n        }\n\n        this.timestampOffset = Date.now();\n        this.setState({\n          friendlyName: friendlyName,\n          startDate: startDate,\n          trips: trips,\n          loopLength: loopLength,\n          timeMultiplier: timeMultiplier\n        });\n      }\n    });\n  }\n\n  loadNodeList(dataUrlIdx: number) {\n    requestJson(CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].nodeListUrl, (error: any, response: string[]) => {\n      if (error == null) {\n        response.sort();\n        this.setState({\n          nodeList: response\n        });\n      }\n    });\n  }\n\n  loadGeoJsonNodes(dataUrlIdx: number) {\n    requestJson(CURRENT_APP_CONFIG.dataSamples[dataUrlIdx].geoJsonUrl, (error: any, response: geojson.FeatureCollection<geojson.Point>) => {\n      if (error == null) {\n        this.setState({\n          nodes: response\n        });\n      }\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getLoopTime() {\n    return this.state.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: CURRENT_APP_CONFIG.defaultTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({loopTimeMinutes: CURRENT_APP_CONFIG.defaultLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightNodeChange(highlightedNodesCommaSep: ValueType<any>, action: ActionMeta) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = this.state.highlightedNodes.length > highlightedNodes.length;\n    this.setState({highlightedNodes: highlightedNodes});\n    this.knownUrlParams.highlightedNodes = highlightedNodes;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedNodesRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightNodeReload() {\n    // create a new array for trips so the colours are updated\n    this.setState({trips: Object.assign([], this.state.trips)});\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any>, action: ActionMeta) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadNodeList(dataSampleIdx);\n      this.loadGeoJsonNodes(dataSampleIdx);\n      this.handleViewportChange(CURRENT_APP_CONFIG.dataSamples[dataSampleIdx].getInitialPartialViewport());\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  render() {\n    const {friendlyName, trips, friendlyTime, loopLength, loopTimeMinutes, trailLength, percentThroughLoop, highlightedNodes, nodeList, dataSampleIdx: dataUrlIdx, nodes, popupInfo, viewport} = this.state;\n\n    const dataSampleOptions: any[] = CURRENT_APP_CONFIG.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedNodesVl: any[] = highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div>{CURRENT_APP_CONFIG.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (CURRENT_APP_CONFIG.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataUrlIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={CURRENT_APP_CONFIG.mapboxStyle}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={CURRENT_APP_CONFIG.mapboxToken}>\n            <DeckGLOverlay \n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightedNodes={highlightedNodes}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getLoopTime()}\n              nodes={nodes!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n          <div id=\"divinfo\">\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust loop time</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {CURRENT_APP_CONFIG.nodeLabelPlural}</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={false}\n                  isMulti\n                  options={nodeListOptions}\n                  onChange={this.handleHighlightNodeChange}\n                  onMenuClose={this.handleHighlightNodeReload}\n                  placeholder={\"Highlight \" + CURRENT_APP_CONFIG.nodeLabelPlural}\n                  value={highlightedNodesVl}\n                />\n              </div>\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}