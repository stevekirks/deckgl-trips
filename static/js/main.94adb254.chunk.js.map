{"version":3,"sources":["deckgl-overlay.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["DeckGLOverlay","props","useState","currentTime","setCurrentTime","id","animation","useEffect","window","requestAnimationFrame","animate","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMinutes","cancelAnimationFrame","layers","trips","push","TripsLayer","data","getPath","d","segments","map","p","coordinates","getTimestamps","getColor","color","tagColor","nodes","highlightedNodes","length","forEach","n","find","hn","toLowerCase","highlightColor","opacity","widthMinPixels","trailLength","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","pickable","autoHighlight","onHover","handleOnHover","onClick","info","console","log","object","properties","name","initialViewState","viewState","viewport","Loader","className","React","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","PARAM_DATA_IDX","PARAM_LOOPTIME","PARAM_TRAILLENGTH","PARAM_HIGHLIGHTNODES","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","dataSampleIdx","String","queryFilters","history","pushState","DEFAULT_APP_CONFIG","colors","dataSamples","title","tripsUrl","process","geoJsonUrl","nodeListUrl","initialPartialViewport","latitude","longitude","zoom","initialLoopTimeMinutes","initialTrailLength","initialViewport","maxZoom","pitch","bearing","width","height","mapboxStyle","mapboxToken","nodeLabel","nodeLabelPlural","mapboxgl","workerClass","require","default","App","knownUrlParams","result","dataIdx","highlightNodes","Utils","initialDataSampleIdx","appConfig","setDataSampleIdx","friendlyName","setFriendlyName","friendlyTime","setFriendlyTime","hideInfoBox","setHideInfoBox","setHighlightedNodes","setLoopLength","setLoopTimeMinutes","nodeList","setNodeList","setNodes","percentThroughLoop","setPercentThroughLoop","popupInfo","setPopupInfo","startDate","setStartDate","setTimestampOffset","timeMultiplier","setTimeMultiplier","setTrailLength","setTrips","updateBoxInfoLoopToggle","setUpdateBoxInfoLoopToggle","Object","assign","setViewport","addEventListener","resize","loadTrips","loadNodeList","loadGeoJsonNodes","intervalId","setInterval","clearInterval","pTimestamp","pLoopTime","timeThroughLoop","pPercentThroughLoop","Math","floor","calculatedFriendlyTime","timeSinceStart","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","toFriendlyTime","dataUrlIdx","url","fetch","method","headers","then","fetchResponse","status","json","response","pFriendlyName","pStartDate","startTimestamp","parse","pTimeMultiplier","pTrips","pLoopLength","catch","error","sort","getLoopTime","handleHighlightNodeChange","highlightedNodesCommaSep","pHighlightedNodes","value","highlightedNodesRemoved","handleHighlightNodeReload","handleViewportChange","innerWidth","innerHeight","pViewport","handleInfoBoxVisibility","pHideInfoBox","dataSampleOptions","idx","nodeListOptions","highlightedNodesVl","loader","popupEle","geometry","closeButton","closeOnClick","anchor","selectDataEle","options","onChange","dataSampleOption","pDataSampleIdx","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","type","min","max","event","newPercentThroughLoop","target","defaultValue","onInput","loopTimeMinutesStr","pLoopTimeMinutes","parseFloat","newLoopTime","trailLengthStr","pTrailLength","closeMenuOnSelect","isMulti","onMenuClose","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94adb254.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, Waypoint} from './data-interfaces';\nimport { RGBAColor, Position } from '@deck.gl/core';\n\nconst DeckGLOverlay = (props: DeckglOverlayProps) => {\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [animation] = useState({id:0});\n\n  useEffect(() => {\n    const animate = () => {\n      if (props.loopLength != null) {\n        const timestamp = Date.now() - props.timestampOffset;\n        const loopTime = props.loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n        setCurrentTime((timestamp % loopTime) * (props.loopLength / loopTime));\n      }\n      animation.id = window.requestAnimationFrame(animate);\n    }\n\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n  }, [animation, props.loopLength, props.timestampOffset, props.loopTimeMinutes]);\n\n  const getColor = (d: Trip) => {\n    let color = props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    if (d.nodes != null) {\n      if (props.highlightedNodes.length > 0) {\n        d.nodes.forEach((n: string) => {\n          if (props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n            color = props.highlightColor;\n          }\n        });\n      }\n    }\n\n    return color as RGBAColor;\n  }\n\n  let layers = [];\n  \n  if (props.trips != null) {\n    layers.push(new TripsLayer({\n      id: 'trips',\n      data: props.trips,\n      getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates as Position),\n      getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n      getColor: getColor,\n      opacity: 0.3,\n      widthMinPixels: 2,\n      trailLength: props.trailLength,\n      currentTime\n    }));\n  }\n\n  if (props.nodes != null) {\n    layers.push(new GeoJsonLayer({\n      id: 'geojson-layer',\n      data: props.nodes,\n      filled: true,\n      getFillColor: () => [0, 255, 178, 150],\n      stroked: true,\n      extruded: false,\n      pointRadiusScale: 100,\n      getRadius: () => 0.4,\n      pickable: true,\n      autoHighlight: true,\n      highlightColor: [0, 255, 178, 250],\n      onHover: props.handleOnHover,\n      onClick: (info: any) => console.log(info.object.properties.name)\n    }));\n  }\n\n  if (layers.length === 0) {\n    return null;\n  }\n\n  return (\n    <DeckGL\n      initialViewState={props.initialViewState}\n      viewState={props.viewport}\n      layers={layers}\n    />\n  );\n}\n\nexport default DeckGLOverlay;","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTNODES = 'highlightNodes';\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport function getKnownUrlParameters(): KnownUrlParameters {\n  let result: KnownUrlParameters = {\n    dataSampleIdx: null,\n    loopTime: null,\n    trailLength: null,\n    highlightedNodes: null\n  };\n\n  // Convert day to dataUrlIdx\n  let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n  if (dataIdx != null && dataIdx >= 0) {\n    result.dataSampleIdx = dataIdx;\n  }\n\n  // Validate loopTime\n  let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n  if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n    result.loopTime = loopTime;\n  }\n\n  // Validate trailLength\n  let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n  if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n    result.trailLength = trailLength;\n  }\n\n  // Validate highlightNode\n  let highlightNodes = getUrlParam(PARAM_HIGHLIGHTNODES);\n  if (highlightNodes != null && highlightNodes.length > 0) {\n    result.highlightedNodes = highlightNodes.split(',');\n  }\n\n  return result;\n}\n\nexport function updateUrlParameters(params: KnownUrlParameters) {\n  let newStateStr = decodeURIComponent(window.location.search.substring(1));\n  if (params.dataSampleIdx != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n  }\n  if (params.loopTime != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n  }\n  if (params.trailLength != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n  }\n  if (params.highlightedNodes != null) {\n    newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTNODES, params.highlightedNodes.join(','));\n  }\n  \n  let queryFilters = \"?\" + newStateStr;\n  window.history.pushState({}, \"\", queryFilters);\n}","import { AppConfig } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_CONFIG: AppConfig = {\n    color: [23, 184, 190], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    dataSamples: [\n        { \n            title: \"SE QLD Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/south-east-qld/stops-list.json',\n            initialPartialViewport: {\n                latitude: -27.44,\n                longitude: 153.05,\n                zoom: 11\n            }\n        },\n        { \n            title: \"SC Transport\", \n            tripsUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/trips.json',\n            geoJsonUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/geojson-stops.json',\n            nodeListUrl: process.env.REACT_APP_DATA_BASE_URL! + '/sunshine-coast/stops-list.json',\n            initialPartialViewport: {\n                latitude: -26.65,\n                longitude: 153.02,\n                zoom: 10\n            }\n        }\n    ],\n    highlightColor: [253, 128, 93], // orange\n    initialLoopTimeMinutes: 3,\n    initialTrailLength: 100,\n    initialViewport: {\n        latitude: -27.44,\n        longitude: 153.05,\n        zoom: 11,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    },\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    nodeLabel: \"Stop\",\n    nodeLabelPlural: 'Stops',\n    title: \"Trips\"\n};","import { useState, useEffect } from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppConfig, KnownUrlParameters, Trip, TripContainer, DataSampleUrls} from './data-interfaces';\nimport * as Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType } from 'react-select/src/types';\nimport { DEFAULT_APP_CONFIG } from './default-app-config';\n\n// Workaround: next 4 lines are to fix issue https://github.com/mapbox/mapbox-gl-js/issues/10565\n// Install packages worker-loader & mapbox-gl\nimport mapboxgl from \"mapbox-gl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n(mapboxgl as any).workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nconst App = () => {\n\n  let knownUrlParams: KnownUrlParameters = Utils.getKnownUrlParameters();\n  let initialDataSampleIdx = knownUrlParams.dataSampleIdx || 0;\n\n  const [appConfig] = useState<AppConfig>(DEFAULT_APP_CONFIG);\n  const [dataSampleIdx, setDataSampleIdx] = useState(initialDataSampleIdx);\n  const [friendlyName, setFriendlyName] = useState('');\n  const [friendlyTime, setFriendlyTime] = useState('');\n  const [hideInfoBox, setHideInfoBox] = useState(false);\n  const [highlightedNodes, setHighlightedNodes] = useState(knownUrlParams.highlightedNodes != null ? knownUrlParams.highlightedNodes : []);\n  const [loopLength, setLoopLength] = useState(1000);\n  const [loopTimeMinutes, setLoopTimeMinutes] = useState(knownUrlParams.loopTime || DEFAULT_APP_CONFIG.initialLoopTimeMinutes);\n  const [nodeList, setNodeList] = useState<string[]>([]);\n  const [nodes, setNodes] = useState<geojson.FeatureCollection<geojson.Point> | null>(null);\n  const [percentThroughLoop, setPercentThroughLoop] = useState(0);\n  const [popupInfo, setPopupInfo] = useState<any>(null);\n  const [startDate, setStartDate] = useState<Date>(new Date(2000, 1, 1, 0, 0, 0));\n  const [timestampOffset, setTimestampOffset] = useState<number>(Date.now());\n  const [timeMultiplier, setTimeMultiplier] = useState(1);\n  const [trailLength, setTrailLength] = useState(knownUrlParams.trailLength || DEFAULT_APP_CONFIG.initialTrailLength);\n  const [trips, setTrips] = useState<Trip[] | null>(null);\n  const [updateBoxInfoLoopToggle, setUpdateBoxInfoLoopToggle] = useState(false);\n  const [viewport, setViewport] = useState(Object.assign({}, DEFAULT_APP_CONFIG.initialViewport, DEFAULT_APP_CONFIG.dataSamples[initialDataSampleIdx].initialPartialViewport));\n\n  useEffect(() => {\n    window.addEventListener('resize', resize);\n    resize();\n    loadTrips(dataSampleIdx);\n    loadNodeList(dataSampleIdx);\n    loadGeoJsonNodes(dataSampleIdx);\n    const intervalId = setInterval(() => setUpdateBoxInfoLoopToggle(updateBoxInfoLoopToggle => !updateBoxInfoLoopToggle), 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // Update Box Info\n\n    const toFriendlyTime = (timeSinceStart: number) => {\n      let realTimeSinceStart = timeSinceStart / timeMultiplier;\n      let currentDate = new Date(startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n    }\n\n    if (startDate != null) {\n      const pTimestamp = Date.now() - timestampOffset;\n      const pLoopTime = loopTimeMinutes * 60 * 1000; // the loop time in milliseconds that deck gl displays\n\n      let timeThroughLoop = (pTimestamp % pLoopTime);\n      let pPercentThroughLoop = Math.floor((timeThroughLoop / pLoopTime) * 100);\n\n      // show time\n      let timeSinceStart = Math.floor(timeThroughLoop * (loopLength / pLoopTime));\n      let calculatedFriendlyTime = toFriendlyTime(timeSinceStart);\n\n      setFriendlyTime(calculatedFriendlyTime);\n      setPercentThroughLoop(pPercentThroughLoop);\n    }\n  }, [updateBoxInfoLoopToggle, timestampOffset, loopLength, loopTimeMinutes, startDate, timeMultiplier]);\n\n  const loadTrips = (dataUrlIdx: number) => {\n    let url = appConfig.dataSamples[dataUrlIdx].tripsUrl;\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            \"Accept\": \"application/json; charset=utf-8\"\n        }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: TripContainer) => {\n            let pFriendlyName = appConfig.title;\n            if (response.friendlyName != null) {\n              pFriendlyName = response.friendlyName;\n            }\n            let pStartDate = Number(response.startTimestamp) \n              ? new Date(response.startTimestamp as number * 1000)\n              : new Date(Date.parse(response.startTimestamp as string));\n            let pTimeMultiplier = response.timeMultiplier;\n            let pTrips = response.trips;\n            let pLoopLength = response.loopLength;\n\n            // allocate colours if there's a small number of trips\n            if (pTrips.length > 0 && pTrips.length <= 10) {\n              for (let i = 0; i < pTrips.length; i++) {\n                pTrips[i].color = appConfig.colors[i % appConfig.colors.length];\n              }\n            }\n\n            setStartDate(pStartDate);\n            setTimestampOffset(Date.now());\n            setFriendlyName(pFriendlyName);\n            setTrips(pTrips);\n            setLoopLength(pLoopLength);\n            setTimeMultiplier(pTimeMultiplier);\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  const loadNodeList = (dataUrlIdx: number) => {\n    fetch(appConfig.dataSamples[dataUrlIdx].nodeListUrl, {\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: string[]) => {\n            response.sort();\n            setNodeList(response);\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  const loadGeoJsonNodes = (dataUrlIdx: number) => {\n    fetch(appConfig.dataSamples[dataUrlIdx].geoJsonUrl, {\n      method: \"GET\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Accept\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (fetchResponse) {\n        if (fetchResponse.status === 200) {\n          fetchResponse.json().then((response: geojson.FeatureCollection<geojson.Point>) => {\n            setNodes(response);\n          });\n        } else {\n          console.log('Sorry, something went wrong (' + fetchResponse.status + ')');\n        }\n    }).catch(function (error) {\n        console.log(error);\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  const getLoopTime = () => {\n    return loopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  }\n\n  const handleTimeChange = (event: any) => {\n    const timestamp = Date.now() - timestampOffset;\n    const loopTime = getLoopTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    setTimestampOffset(newTimestampOffset);\n  }\n\n  const handleTrailLengthChange = (event: any) => {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let pTrailLength = parseFloat(trailLengthStr);\n      if (pTrailLength <= 0) {\n        pTrailLength = 0.0001;\n      } else if (pTrailLength > 9999999) {\n        pTrailLength = 9999999;\n      }\n      setTrailLength(pTrailLength);\n      knownUrlParams.trailLength = pTrailLength;\n      Utils.updateUrlParameters(knownUrlParams);\n    } else {\n      setTrailLength(appConfig.initialTrailLength);\n      knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(knownUrlParams);\n    }\n  }\n\n  const handleLoopTimeMinutesChange = (event: any) => {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let pLoopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (pLoopTimeMinutes <= 0) {\n        pLoopTimeMinutes = 0.0001;\n      } else if (pLoopTimeMinutes > 9999999) {\n        pLoopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - timestampOffset;\n      const loopTime = getLoopTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = pLoopTimeMinutes * 60 * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      setTimestampOffset(newTimestampOffset);\n  \n      setLoopTimeMinutes(pLoopTimeMinutes);\n      knownUrlParams.loopTime = pLoopTimeMinutes;\n      Utils.updateUrlParameters(knownUrlParams);\n    } else {\n      setLoopTimeMinutes(appConfig.initialLoopTimeMinutes);\n      knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(knownUrlParams);\n    }\n  }\n\n  const handleHighlightNodeChange = (highlightedNodesCommaSep: ValueType<any, any>) => {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let pHighlightedNodes: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = highlightedNodes.length > pHighlightedNodes.length;\n    setHighlightedNodes(pHighlightedNodes);\n    knownUrlParams.highlightedNodes = pHighlightedNodes;\n    Utils.updateUrlParameters(knownUrlParams);\n    if (highlightedNodesRemoved) {\n      handleHighlightNodeReload();\n    }\n  }\n\n  const handleHighlightNodeReload = () => {\n    // create a new array for trips so the colours are updated\n    setTrips(Object.assign([], trips));\n  }\n\n  const handleDataChange = (dataSampleOption: ValueType<any, any>) => {    \n    if (dataSampleOption != null && dataSampleIdx !== dataSampleOption.value) {\n      handleHighlightNodeChange([]);\n      let pDataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      setTrips(null);\n      setDataSampleIdx(pDataSampleIdx);\n      loadTrips(pDataSampleIdx);\n      loadNodeList(pDataSampleIdx);\n      loadGeoJsonNodes(pDataSampleIdx);\n      handleViewportChange(appConfig.dataSamples[pDataSampleIdx].initialPartialViewport);\n      knownUrlParams.dataSampleIdx = pDataSampleIdx;\n      Utils.updateUrlParameters(knownUrlParams);\n    }\n  }\n\n  const handleOnHoverGeoPoint = (info: any) => {\n    setPopupInfo(info !== null ? info.object : null);\n  }\n\n  const resize = () => {\n    handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  const handleViewportChange = (pViewport: any) => {\n    setViewport(Object.assign({}, viewport, pViewport));\n  }\n\n  const handleInfoBoxVisibility = (pHideInfoBox: boolean) => {\n    setHideInfoBox(pHideInfoBox);\n  }\n\n  const dataSampleOptions: any[] = appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n  const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n  const highlightedNodesVl: any[] = highlightedNodes.map(n => { return { \"value\": n, \"label\": n} });\n\n  let loader = <span></span>;\n  if (trips == null) {\n    loader = <Loader />;\n  }\n\n  let popupEle = null;\n  if (popupInfo != null) {\n    popupEle =\n      <Popup longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n        <div className=\"popup-inner\">{appConfig.nodeLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}</div>\n      </Popup>;\n  }\n\n  let selectDataEle = null;\n  if (appConfig.dataSamples.length > 1) {\n    selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={handleDataChange} value={dataSampleOptions[dataSampleIdx]} /></div></div>;\n  }\n\n  return (\n    <div id=\"container\">\n      {loader}\n      <div id=\"divdeckgl\">\n        <ReactMapGL \n          {...viewport}\n          mapStyle={appConfig.mapboxStyle}\n          dragRotate={true}\n          onViewportChange={handleViewportChange}\n          mapboxApiAccessToken={appConfig.mapboxToken}>\n          <DeckGLOverlay \n            color={appConfig.color}\n            handleOnHover={handleOnHoverGeoPoint}\n            highlightColor={appConfig.highlightColor}\n            highlightedNodes={highlightedNodes}\n            initialViewState={appConfig.initialViewport}\n            loopLength={loopLength}\n            loopTimeMinutes={loopTimeMinutes}\n            nodes={nodes!}\n            timestampOffset={timestampOffset}\n            trips={trips}\n            trailLength={trailLength}\n            viewport={viewport}\n            />\n          {popupEle}\n        </ReactMapGL>\n      </div>\n      <div id=\"top-left-container\">\n        <div id=\"title-box\"><h1>{friendlyName}</h1></div>\n        <div id=\"divinfo\" className={hideInfoBox ? \"hide\" : \"\"}>\n          <button id=\"btnHideInfoBox\" className=\"btn-transparent right-align\" onClick={() => handleInfoBoxVisibility(true)}>X</button>\n          {selectDataEle}\n          <h3>{friendlyTime}</h3>\n          <div>\n            <h6>Adjust point in time</h6>\n            <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={handleTimeChange} />\n          </div>\n          <div>\n            <h6>Adjust loop time</h6>\n            <div className=\"block\">\n              <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={handleLoopTimeMinutesChange} /><label>mins</label>\n            </div>\n          </div>\n          <div>\n            <h6>Adjust trail length</h6>\n            <div className=\"block\">\n              <input type=\"number\" defaultValue={String(trailLength)} onInput={handleTrailLengthChange} /><label>x</label>\n            </div>\n          </div>\n          <div>\n            <h6>Highlight {appConfig.nodeLabelPlural}</h6>\n            <div>\n              <Select\n                closeMenuOnSelect={false}\n                isMulti\n                options={nodeListOptions}\n                onChange={handleHighlightNodeChange}\n                onMenuClose={handleHighlightNodeReload}\n                placeholder={\"Highlight \" + appConfig.nodeLabelPlural}\n                value={highlightedNodesVl}\n              />\n            </div>\n          </div>\n        </div>\n        <button id=\"btnShowInfoBox\" className={\"btn-transparent \" + (hideInfoBox ? \"\" : \"hide\")} onClick={() => handleInfoBoxVisibility(false)}>SHOW INFO BOX</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}